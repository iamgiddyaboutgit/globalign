# globaligner { #globalign.globaligner }

`globaligner`

Perform optimal global alignment of two nucleotide or amino acid sequences.

## Functions

| Name | Description |
| --- | --- |
| [dp_array_backward](#globalign.globaligner.dp_array_backward) | Traces backward through the dp_array |
| [dp_array_forward](#globalign.globaligner.dp_array_forward) | Modifies dp_array in-place. |
| [find_global_alignment](#globalign.globaligner.find_global_alignment) | Args: |
| [take_gap_in_seq_1](#globalign.globaligner.take_gap_in_seq_1) | Modifies the lists in-place. |
| [take_gap_in_seq_2](#globalign.globaligner.take_gap_in_seq_2) | Modifies the lists in-place. |
| [take_match](#globalign.globaligner.take_match) | Modifies the lists in-place. |
| [take_mismatch](#globalign.globaligner.take_mismatch) | Modifies the lists in-place. |

### dp_array_backward { #globalign.globaligner.dp_array_backward }

```python
globaligner.dp_array_backward(
    dp_array,
    seq_1,
    seq_2,
    costing_mat,
    gap_open_cost,
)
```

Traces backward through the dp_array

to determine which alignment moves are best.

Returns:
    tuple with entries of:
        seq_1_aligned,
        middle_part,
        seq_2_aligned,
        cost

### dp_array_forward { #globalign.globaligner.dp_array_forward }

```python
globaligner.dp_array_forward(dp_array, seq_1, seq_2, costing_mat, gap_open_cost)
```

Modifies dp_array in-place.

### find_global_alignment { #globalign.globaligner.find_global_alignment }

```python
globaligner.find_global_alignment(
    input_fasta=None,
    output=None,
    seq_1=None,
    seq_2=None,
    scoring_mat_name=None,
    scoring_mat_path=None,
    match_score=None,
    mismatch_score=None,
    mismatch_cost=None,
    gap_open_score=None,
    gap_open_cost=None,
    gap_extension_score=None,
    gap_extension_cost=None,
)
```

Args:
    gap_open_cost: The cost for a gap just to exist.
        This cost should be non-negative.
        It can be incurred multiple times
        if there are multiple runs of gaps in the
        alignment. Note that an alignment like

                AT-CG
                ||  |
                ATT-G

        incurs the gap_open_cost twice.

Returns:
    AlignmentResults instance with attributes of:
        seq_1_aligned,
        middle_part,
        seq_2_aligned,
        cost,
        score,
        scoring_mat,
        costing_mat,
        gap_open_score,
        gap_open_cost,
        output

### take_gap_in_seq_1 { #globalign.globaligner.take_gap_in_seq_1 }

```python
globaligner.take_gap_in_seq_1(
    seq_1,
    seq_2,
    seq_1_index,
    seq_2_index,
    seq_1_aligned,
    middle_part,
    seq_2_aligned,
)
```

Modifies the lists in-place.

### take_gap_in_seq_2 { #globalign.globaligner.take_gap_in_seq_2 }

```python
globaligner.take_gap_in_seq_2(
    seq_1,
    seq_2,
    seq_1_index,
    seq_2_index,
    seq_1_aligned,
    middle_part,
    seq_2_aligned,
)
```

Modifies the lists in-place.

### take_match { #globalign.globaligner.take_match }

```python
globaligner.take_match(
    seq_1,
    seq_2,
    seq_1_index,
    seq_2_index,
    seq_1_aligned,
    middle_part,
    seq_2_aligned,
)
```

Modifies the lists in-place.

### take_mismatch { #globalign.globaligner.take_mismatch }

```python
globaligner.take_mismatch(
    seq_1,
    seq_2,
    seq_1_index,
    seq_2_index,
    seq_1_aligned,
    middle_part,
    seq_2_aligned,
)
```

Modifies the lists in-place.