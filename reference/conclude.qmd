# conclude { #globalign.conclude }

`conclude`



## Functions

| Name | Description |
| --- | --- |
| [final_cost_to_score](#globalign.conclude.final_cost_to_score) | https://curiouscoding.nl/posts/alignment-scores-transform/ |
| [final_score_to_cost](#globalign.conclude.final_score_to_cost) | https://curiouscoding.nl/posts/alignment-scores-transform/ |
| [prettify_mat](#globalign.conclude.prettify_mat) | Makes a nested dictionary  |
| [print_nested_list_aligned](#globalign.conclude.print_nested_list_aligned) | Pretty-prints a nested list. |

### final_cost_to_score { #globalign.conclude.final_cost_to_score }

```python
conclude.final_cost_to_score(cost, m, n, max_score, delta_d=None, delta_i=None)
```

https://curiouscoding.nl/posts/alignment-scores-transform/

https://www.biorxiv.org/content/10.1101/2022.01.12.476087v1.full.pdf

Args:
    m: length of seq_1
    n: length of seq_2
    max_score: A maximum score in the original
        scoring matrix.

### final_score_to_cost { #globalign.conclude.final_score_to_cost }

```python
conclude.final_score_to_cost(score, m, n, max_score, delta_d=None, delta_i=None)
```

https://curiouscoding.nl/posts/alignment-scores-transform/

https://www.biorxiv.org/content/10.1101/2022.01.12.476087v1.full.pdf

Args:
    score: The conventional score for the alignment
        using some conventional scoring scheme.
    max_score: A maximum score in the original
        scoring matrix.

### prettify_mat { #globalign.conclude.prettify_mat }

```python
conclude.prettify_mat(mat)
```

Makes a nested dictionary 

representation of a matrix look better
prior to printing.

Args:
    mat:

### print_nested_list_aligned { #globalign.conclude.print_nested_list_aligned }

```python
conclude.print_nested_list_aligned(nested_list)
```

Pretty-prints a nested list.

Args:
    nested_list: Let's call each entry in nested_list 
        a 'row'.  Each 'row' is a list of the same length.