[
  {
    "objectID": "reference/docs/conclude.html",
    "href": "reference/docs/conclude.html",
    "title": "conclude",
    "section": "",
    "text": "conclude\n\n\n\n\n\nName\nDescription\n\n\n\n\nfinal_cost_to_score\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\n\n\nfinal_score_to_cost\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\n\n\nprettify_mat\nMakes a nested dictionary\n\n\nprint_nested_list_aligned\nPretty-prints a nested list.\n\n\n\n\n\nconclude.final_cost_to_score(cost, m, n, max_score, delta_d=None, delta_i=None)\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\nhttps://www.biorxiv.org/content/10.1101/2022.01.12.476087v1.full.pdf\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm\nint\nlength of seq_1\nrequired\n\n\nn\nint\nlength of seq_2\nrequired\n\n\nmax_score\nint | float\nA maximum score in the original scoring matrix.\nrequired\n\n\n\n\n\n\n\nconclude.final_score_to_cost(score, m, n, max_score, delta_d=None, delta_i=None)\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\nhttps://www.biorxiv.org/content/10.1101/2022.01.12.476087v1.full.pdf\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nscore\nint | float\nThe conventional score for the alignment using some conventional scoring scheme.\nrequired\n\n\nmax_score\nint | float\nA maximum score in the original scoring matrix.\nrequired\n\n\n\n\n\n\n\nconclude.prettify_mat(mat)\nMakes a nested dictionary\nrepresentation of a matrix look better prior to printing.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmat\ndict[dict]\n\nrequired\n\n\n\n\n\n\n\nconclude.print_nested_list_aligned(nested_list)\nPretty-prints a nested list.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnested_list\nlist[list[int | float | str]]\nLet’s call each entry in nested_list a ‘row’. Each ‘row’ is a list of the same length.\nrequired"
  },
  {
    "objectID": "reference/docs/conclude.html#functions",
    "href": "reference/docs/conclude.html#functions",
    "title": "conclude",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfinal_cost_to_score\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\n\n\nfinal_score_to_cost\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\n\n\nprettify_mat\nMakes a nested dictionary\n\n\nprint_nested_list_aligned\nPretty-prints a nested list.\n\n\n\n\n\nconclude.final_cost_to_score(cost, m, n, max_score, delta_d=None, delta_i=None)\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\nhttps://www.biorxiv.org/content/10.1101/2022.01.12.476087v1.full.pdf\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm\nint\nlength of seq_1\nrequired\n\n\nn\nint\nlength of seq_2\nrequired\n\n\nmax_score\nint | float\nA maximum score in the original scoring matrix.\nrequired\n\n\n\n\n\n\n\nconclude.final_score_to_cost(score, m, n, max_score, delta_d=None, delta_i=None)\nhttps://curiouscoding.nl/posts/alignment-scores-transform/\nhttps://www.biorxiv.org/content/10.1101/2022.01.12.476087v1.full.pdf\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nscore\nint | float\nThe conventional score for the alignment using some conventional scoring scheme.\nrequired\n\n\nmax_score\nint | float\nA maximum score in the original scoring matrix.\nrequired\n\n\n\n\n\n\n\nconclude.prettify_mat(mat)\nMakes a nested dictionary\nrepresentation of a matrix look better prior to printing.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmat\ndict[dict]\n\nrequired\n\n\n\n\n\n\n\nconclude.print_nested_list_aligned(nested_list)\nPretty-prints a nested list.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnested_list\nlist[list[int | float | str]]\nLet’s call each entry in nested_list a ‘row’. Each ‘row’ is a list of the same length.\nrequired"
  },
  {
    "objectID": "reference/docs/globaligner.html",
    "href": "reference/docs/globaligner.html",
    "title": "globaligner",
    "section": "",
    "text": "globaligner\nPerform optimal global alignment of two nucleotide or amino acid sequences.\n\n\n\n\n\nName\nDescription\n\n\n\n\ndp_array_backward\nTraces backward through the dp_array\n\n\ndp_array_forward\nModifies dp_array in-place.\n\n\nfind_global_alignment\n\n\n\ntake_gap_in_seq_1\nModifies the lists in-place.\n\n\ntake_gap_in_seq_2\nModifies the lists in-place.\n\n\ntake_match\nModifies the lists in-place.\n\n\ntake_mismatch\nModifies the lists in-place.\n\n\n\n\n\nglobaligner.dp_array_backward(\n    dp_array,\n    seq_1,\n    seq_2,\n    costing_mat,\n    gap_open_cost,\n)\nTraces backward through the dp_array\nto determine which alignment moves are best.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\ntuple with entries of: seq_1_aligned, middle_part, seq_2_aligned, cost\n\n\n\n\n\n\n\nglobaligner.dp_array_forward(dp_array, seq_1, seq_2, costing_mat, gap_open_cost)\nModifies dp_array in-place.\n\n\n\nglobaligner.find_global_alignment(\n    input_fasta=None,\n    output=None,\n    seq_1=None,\n    seq_2=None,\n    scoring_mat_name=None,\n    scoring_mat_path=None,\n    match_score=None,\n    mismatch_score=None,\n    mismatch_cost=None,\n    gap_open_score=None,\n    gap_open_cost=None,\n    gap_extension_score=None,\n    gap_extension_cost=None,\n)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput_fasta\nstr | Path\nFile path to a FASTA file containing two sequences to align. Do not include if seq_1 and seq_2 are provided. If the file contains more than 2 sequences, only the first 2 will be used.\nNone\n\n\noutput\nstr | Path\nOutput file path to which a file containing the global alignment will be written. If not provided, then the alignment will be written to stdout.\nNone\n\n\nseq_1\nstr\nFirst sequence to align. Do not include if input_fasta is provided.\nNone\n\n\nseq_2\nstr\nSecond sequence to align. Do not include if input_fasta is provided.\nNone\n\n\nscoring_mat_name\nstr\nEither ‘BLOSUM50’ or ‘BLOSUM62’. Do not include this option if you would like to use a different scoring scheme or if you are aligning nucleotide sequences. If set, then none of the other options with scores or costs should be set, except for the gap_open options.\nNone\n\n\nscoring_mat_path\nstr | Path\nFile path to a custom scoring matrix file. If set, then none of the other options with scores or costs should be set, except for the gap_open options.\nNone\n\n\nmatch_score\nstr | int\nScore for a match. Should be positive. Only used if scoring_mat is not specified. If set, then none of the options with costs should be set. Default: 2.\nNone\n\n\nmismatch_score\nstr | int\nScore for a mismatch. Should be negative. Only used if scoring_mat is not specified. If set, then none of the options with costs should be set. Default: -3.\nNone\n\n\nmismatch_cost\nstr | int\nCost for a mismatch. Should be positive. If set, then none of the options with scores should be set. Default: 5.\nNone\n\n\ngap_open_score\nstr | int\nScore for opening a run of gaps. It is accumulated even for a run with just one gap in it. Should be non-positive. Only used if scoring_mat is not specified. If set, then none of the options with costs should be set. Default: -4.\nNone\n\n\ngap_open_cost\nstr | int\nCost for opening a run of gaps. It is accumulated even for a run with just one gap in it. Should be non-negative. If set, then none of the options with scores should be set. It can be incurred multiple times if there are multiple runs of gaps in the alignment. Note that an alignment like A–CG | | ATT-G incurs the gap_open_cost twice. Default: 4.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAlignmentResults\nAlignmentResults instance with attributes of: seq_1_aligned, middle_part, seq_2_aligned, cost, score, scoring_mat, costing_mat, gap_open_score, gap_open_cost, output\n\n\n\n\n\n\n\nglobaligner.take_gap_in_seq_1(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place.\n\n\n\nglobaligner.take_gap_in_seq_2(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place.\n\n\n\nglobaligner.take_match(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place.\n\n\n\nglobaligner.take_mismatch(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place."
  },
  {
    "objectID": "reference/docs/globaligner.html#functions",
    "href": "reference/docs/globaligner.html#functions",
    "title": "globaligner",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndp_array_backward\nTraces backward through the dp_array\n\n\ndp_array_forward\nModifies dp_array in-place.\n\n\nfind_global_alignment\n\n\n\ntake_gap_in_seq_1\nModifies the lists in-place.\n\n\ntake_gap_in_seq_2\nModifies the lists in-place.\n\n\ntake_match\nModifies the lists in-place.\n\n\ntake_mismatch\nModifies the lists in-place.\n\n\n\n\n\nglobaligner.dp_array_backward(\n    dp_array,\n    seq_1,\n    seq_2,\n    costing_mat,\n    gap_open_cost,\n)\nTraces backward through the dp_array\nto determine which alignment moves are best.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\ntuple with entries of: seq_1_aligned, middle_part, seq_2_aligned, cost\n\n\n\n\n\n\n\nglobaligner.dp_array_forward(dp_array, seq_1, seq_2, costing_mat, gap_open_cost)\nModifies dp_array in-place.\n\n\n\nglobaligner.find_global_alignment(\n    input_fasta=None,\n    output=None,\n    seq_1=None,\n    seq_2=None,\n    scoring_mat_name=None,\n    scoring_mat_path=None,\n    match_score=None,\n    mismatch_score=None,\n    mismatch_cost=None,\n    gap_open_score=None,\n    gap_open_cost=None,\n    gap_extension_score=None,\n    gap_extension_cost=None,\n)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput_fasta\nstr | Path\nFile path to a FASTA file containing two sequences to align. Do not include if seq_1 and seq_2 are provided. If the file contains more than 2 sequences, only the first 2 will be used.\nNone\n\n\noutput\nstr | Path\nOutput file path to which a file containing the global alignment will be written. If not provided, then the alignment will be written to stdout.\nNone\n\n\nseq_1\nstr\nFirst sequence to align. Do not include if input_fasta is provided.\nNone\n\n\nseq_2\nstr\nSecond sequence to align. Do not include if input_fasta is provided.\nNone\n\n\nscoring_mat_name\nstr\nEither ‘BLOSUM50’ or ‘BLOSUM62’. Do not include this option if you would like to use a different scoring scheme or if you are aligning nucleotide sequences. If set, then none of the other options with scores or costs should be set, except for the gap_open options.\nNone\n\n\nscoring_mat_path\nstr | Path\nFile path to a custom scoring matrix file. If set, then none of the other options with scores or costs should be set, except for the gap_open options.\nNone\n\n\nmatch_score\nstr | int\nScore for a match. Should be positive. Only used if scoring_mat is not specified. If set, then none of the options with costs should be set. Default: 2.\nNone\n\n\nmismatch_score\nstr | int\nScore for a mismatch. Should be negative. Only used if scoring_mat is not specified. If set, then none of the options with costs should be set. Default: -3.\nNone\n\n\nmismatch_cost\nstr | int\nCost for a mismatch. Should be positive. If set, then none of the options with scores should be set. Default: 5.\nNone\n\n\ngap_open_score\nstr | int\nScore for opening a run of gaps. It is accumulated even for a run with just one gap in it. Should be non-positive. Only used if scoring_mat is not specified. If set, then none of the options with costs should be set. Default: -4.\nNone\n\n\ngap_open_cost\nstr | int\nCost for opening a run of gaps. It is accumulated even for a run with just one gap in it. Should be non-negative. If set, then none of the options with scores should be set. It can be incurred multiple times if there are multiple runs of gaps in the alignment. Note that an alignment like A–CG | | ATT-G incurs the gap_open_cost twice. Default: 4.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAlignmentResults\nAlignmentResults instance with attributes of: seq_1_aligned, middle_part, seq_2_aligned, cost, score, scoring_mat, costing_mat, gap_open_score, gap_open_cost, output\n\n\n\n\n\n\n\nglobaligner.take_gap_in_seq_1(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place.\n\n\n\nglobaligner.take_gap_in_seq_2(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place.\n\n\n\nglobaligner.take_match(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place.\n\n\n\nglobaligner.take_mismatch(\n    seq_1,\n    seq_2,\n    seq_1_index,\n    seq_2_index,\n    seq_1_aligned,\n    middle_part,\n    seq_2_aligned,\n)\nModifies the lists in-place."
  },
  {
    "objectID": "reference/tutorial.html",
    "href": "reference/tutorial.html",
    "title": "Tutorial",
    "section": "",
    "text": "The entrypoint to the package is through globaligner. For example, to perform an alignment with the default settings, enter a command similar to the following from the environment in which globalign has been installed.\nglobaligner --seq_1 \"ACGT\" --seq_2 \"AGT\"\n\n\n\n\n\n\nOutput\n\n\n\n\n\nseq_1\nseq_2\n\nACGT\n| ||\nA-GT\n\nscore: 0\ncost: 7\n###########################################\n# Settings\n###########################################\nscoring_mat:\n    A  C  G  T  -\nA   2 -3 -3 -3 -2\nC  -3  2 -3 -3 -2\nG  -3 -3  2 -3 -2\nT  -3 -3 -3  2 -2\n-  -2 -2 -2 -2  2\n\ngap_open_score: -4\n\ncosting_mat:\n   A C G T -\nA  0 5 5 5 3\nC  5 0 5 5 3\nG  5 5 0 5 3\nT  5 5 5 0 3\n-  3 3 3 3 0\n\ngap_open_cost: 4\n\n\n\nCustomization is possible. The options available to the globaligner command are:\n\n\n\n\n\n\nOptions\n\n\n\n\n\noptions:\n  -h, --help            show this help message and exit\n  --version             Prints the version and exits.\n  -i INPUT_FASTA, --input_fasta INPUT_FASTA\n                        File path to a FASTA file containing two sequences\n                        to align. Do not include if seq_1 and seq_2 are\n                        provided. If the file contains more than 2\n                        sequences, only the first 2 will be used.\n  -o OUTPUT, --output OUTPUT\n                        Output file path to which a file containing the\n                        global alignment will be written. If not provided,\n                        then the alignment will be written to stdout.\n  --seq_1 SEQ_1         First sequence to align. Do not include if\n                        input_fasta is provided.\n  --seq_2 SEQ_2         Second sequence to align. Do not include if\n                        input_fasta is provided.\n  --scoring_mat_name {BLOSUM50,BLOSUM62}\n                        Either 'BLOSUM50' or 'BLOSUM62'. Do not include\n                        this option if you would like to use a different\n                        scoring scheme or if you are aligning nucleotide\n                        sequences. If set, then none of the other options\n                        with scores or costs should be set, except for the\n                        gap_open options.\n  --scoring_mat_path SCORING_MAT_PATH\n                        File path to a custom scoring matrix file. If set,\n                        then none of the other options with scores or\n                        costs should be set, except for the gap_open\n                        options.\n  --match_score MATCH_SCORE\n                        Score for a match. Should be positive. Only used\n                        if scoring_mat is not specified. If set, then none\n                        of the options with costs should be set. Default:\n                        2.\n  --mismatch_score MISMATCH_SCORE\n                        Score for a mismatch. Should be negative. Only\n                        used if scoring_mat is not specified. If set, then\n                        none of the options with costs should be set.\n                        Default: -3.\n  --mismatch_cost MISMATCH_COST\n                        Cost for a mismatch. Should be positive. If set,\n                        then none of the options with scores should be\n                        set. Default: 5.\n  --gap_open_score GAP_OPEN_SCORE\n                        Score for opening a run of gaps. It is accumulated\n                        even for a run with just one gap in it. Should be\n                        non-positive. Only used if scoring_mat is not\n                        specified. If set, then none of the options with\n                        costs should be set. Default: -4.\n  --gap_open_cost GAP_OPEN_COST\n                        Cost for opening a run of gaps. It is accumulated\n                        even for a run with just one gap in it. Should be\n                        non-negative. If set, then none of the options\n                        with scores should be set. Default: 4.\n  --gap_extension_score GAP_EXTENSION_SCORE\n                        Score for extending a run of gaps. It is\n                        accumulated even for a run with just one gap in\n                        it. Should be negative. Only used if scoring_mat\n                        is not specified. If set, then none of the options\n                        with costs should be set. Default: -2.\n  --gap_extension_cost GAP_EXTENSION_COST\n                        Cost for extending a run of gaps. It is\n                        accumulated even for a run with just one gap in\n                        it. Should be positive. If set, then none of the\n                        options with scores should be set. Default: 3.\n\n\n\n\n\n\nfrom globalign.globaligner import find_global_alignment\n\nalignment_results = find_global_alignment(\n    output=\"alignment.txt\",\n    seq_1=\"CCTGAA\",\n    seq_2=\"GCCGA\",\n    match_score=1,\n    mismatch_score=-1,\n    gap_open_score=-2,\n    gap_extension_score=-1\n)\n\nalignment_results.write()\n\n\n\n\n\n\nalignment.txt\n\n\n\n\n\nseq_1\nseq_2\n\nCCTGAA\n*|*| |\nGCCG-A\n\nscore: -2\ncost: 8\n###########################################\n# Settings\n###########################################\nscoring_mat:\n    A  C  G  T  -\nA   1 -1 -1 -1 -1\nC  -1  1 -1 -1 -1\nG  -1 -1  1 -1 -1\nT  -1 -1 -1  1 -1\n-  -1 -1 -1 -1  1\n\ngap_open_score: -2\n\ncosting_mat:\n   A C G T -\nA  0 2 2 2 2\nC  2 0 2 2 2\nG  2 2 0 2 2\nT  2 2 2 0 2\n-  1 1 1 1 0\n\ngap_open_cost: 2\n\n\n\nYou can also generate random sequences to align. The algorithm used allows you to generate random sequences that are similar to one another.\nfrom globalign.globaligner import find_global_alignment\nfrom globalign.start import draw_two_random_seqs\n\nseq_1, seq_2 = draw_two_random_seqs(\n    alphabet=[\"A\", \"C\", \"G\", \"T\"], \n    min_len_seq_1=3, \n    max_len_seq_1=10,\n    min_len_seq_2=6, \n    max_len_seq_2=15, \n    divergence=0.5\n)\nalignment = find_global_alignment(seq_1=seq_1, seq_2=seq_2)\nalignment.write()\n\n\n\n\n\n\nExample Output\n\n\n\n\n\nseq_1\nseq_2\n\n----GGATTCATCA\n    |||*||||| \nGAGAGGAATCATC-\n\nscore: -5\ncost: 28\n###########################################\n# Settings\n###########################################\nscoring_mat:\n    A  C  G  T  -\nA   2 -3 -3 -3 -2\nC  -3  2 -3 -3 -2\nG  -3 -3  2 -3 -2\nT  -3 -3 -3  2 -2\n-  -2 -2 -2 -2  2\n\ngap_open_score: -4\n\ncosting_mat:\n   A C G T -\nA  0 5 5 5 3\nC  5 0 5 5 3\nG  5 5 0 5 3\nT  5 5 5 0 3\n-  3 3 3 3 0\n\ngap_open_cost: 4"
  },
  {
    "objectID": "reference/tutorial.html#basic-usage",
    "href": "reference/tutorial.html#basic-usage",
    "title": "Tutorial",
    "section": "",
    "text": "The entrypoint to the package is through globaligner. For example, to perform an alignment with the default settings, enter a command similar to the following from the environment in which globalign has been installed.\nglobaligner --seq_1 \"ACGT\" --seq_2 \"AGT\"\n\n\n\n\n\n\nOutput\n\n\n\n\n\nseq_1\nseq_2\n\nACGT\n| ||\nA-GT\n\nscore: 0\ncost: 7\n###########################################\n# Settings\n###########################################\nscoring_mat:\n    A  C  G  T  -\nA   2 -3 -3 -3 -2\nC  -3  2 -3 -3 -2\nG  -3 -3  2 -3 -2\nT  -3 -3 -3  2 -2\n-  -2 -2 -2 -2  2\n\ngap_open_score: -4\n\ncosting_mat:\n   A C G T -\nA  0 5 5 5 3\nC  5 0 5 5 3\nG  5 5 0 5 3\nT  5 5 5 0 3\n-  3 3 3 3 0\n\ngap_open_cost: 4\n\n\n\nCustomization is possible. The options available to the globaligner command are:\n\n\n\n\n\n\nOptions\n\n\n\n\n\noptions:\n  -h, --help            show this help message and exit\n  --version             Prints the version and exits.\n  -i INPUT_FASTA, --input_fasta INPUT_FASTA\n                        File path to a FASTA file containing two sequences\n                        to align. Do not include if seq_1 and seq_2 are\n                        provided. If the file contains more than 2\n                        sequences, only the first 2 will be used.\n  -o OUTPUT, --output OUTPUT\n                        Output file path to which a file containing the\n                        global alignment will be written. If not provided,\n                        then the alignment will be written to stdout.\n  --seq_1 SEQ_1         First sequence to align. Do not include if\n                        input_fasta is provided.\n  --seq_2 SEQ_2         Second sequence to align. Do not include if\n                        input_fasta is provided.\n  --scoring_mat_name {BLOSUM50,BLOSUM62}\n                        Either 'BLOSUM50' or 'BLOSUM62'. Do not include\n                        this option if you would like to use a different\n                        scoring scheme or if you are aligning nucleotide\n                        sequences. If set, then none of the other options\n                        with scores or costs should be set, except for the\n                        gap_open options.\n  --scoring_mat_path SCORING_MAT_PATH\n                        File path to a custom scoring matrix file. If set,\n                        then none of the other options with scores or\n                        costs should be set, except for the gap_open\n                        options.\n  --match_score MATCH_SCORE\n                        Score for a match. Should be positive. Only used\n                        if scoring_mat is not specified. If set, then none\n                        of the options with costs should be set. Default:\n                        2.\n  --mismatch_score MISMATCH_SCORE\n                        Score for a mismatch. Should be negative. Only\n                        used if scoring_mat is not specified. If set, then\n                        none of the options with costs should be set.\n                        Default: -3.\n  --mismatch_cost MISMATCH_COST\n                        Cost for a mismatch. Should be positive. If set,\n                        then none of the options with scores should be\n                        set. Default: 5.\n  --gap_open_score GAP_OPEN_SCORE\n                        Score for opening a run of gaps. It is accumulated\n                        even for a run with just one gap in it. Should be\n                        non-positive. Only used if scoring_mat is not\n                        specified. If set, then none of the options with\n                        costs should be set. Default: -4.\n  --gap_open_cost GAP_OPEN_COST\n                        Cost for opening a run of gaps. It is accumulated\n                        even for a run with just one gap in it. Should be\n                        non-negative. If set, then none of the options\n                        with scores should be set. Default: 4.\n  --gap_extension_score GAP_EXTENSION_SCORE\n                        Score for extending a run of gaps. It is\n                        accumulated even for a run with just one gap in\n                        it. Should be negative. Only used if scoring_mat\n                        is not specified. If set, then none of the options\n                        with costs should be set. Default: -2.\n  --gap_extension_cost GAP_EXTENSION_COST\n                        Cost for extending a run of gaps. It is\n                        accumulated even for a run with just one gap in\n                        it. Should be positive. If set, then none of the\n                        options with scores should be set. Default: 3.\n\n\n\n\n\n\nfrom globalign.globaligner import find_global_alignment\n\nalignment_results = find_global_alignment(\n    output=\"alignment.txt\",\n    seq_1=\"CCTGAA\",\n    seq_2=\"GCCGA\",\n    match_score=1,\n    mismatch_score=-1,\n    gap_open_score=-2,\n    gap_extension_score=-1\n)\n\nalignment_results.write()\n\n\n\n\n\n\nalignment.txt\n\n\n\n\n\nseq_1\nseq_2\n\nCCTGAA\n*|*| |\nGCCG-A\n\nscore: -2\ncost: 8\n###########################################\n# Settings\n###########################################\nscoring_mat:\n    A  C  G  T  -\nA   1 -1 -1 -1 -1\nC  -1  1 -1 -1 -1\nG  -1 -1  1 -1 -1\nT  -1 -1 -1  1 -1\n-  -1 -1 -1 -1  1\n\ngap_open_score: -2\n\ncosting_mat:\n   A C G T -\nA  0 2 2 2 2\nC  2 0 2 2 2\nG  2 2 0 2 2\nT  2 2 2 0 2\n-  1 1 1 1 0\n\ngap_open_cost: 2\n\n\n\nYou can also generate random sequences to align. The algorithm used allows you to generate random sequences that are similar to one another.\nfrom globalign.globaligner import find_global_alignment\nfrom globalign.start import draw_two_random_seqs\n\nseq_1, seq_2 = draw_two_random_seqs(\n    alphabet=[\"A\", \"C\", \"G\", \"T\"], \n    min_len_seq_1=3, \n    max_len_seq_1=10,\n    min_len_seq_2=6, \n    max_len_seq_2=15, \n    divergence=0.5\n)\nalignment = find_global_alignment(seq_1=seq_1, seq_2=seq_2)\nalignment.write()\n\n\n\n\n\n\nExample Output\n\n\n\n\n\nseq_1\nseq_2\n\n----GGATTCATCA\n    |||*||||| \nGAGAGGAATCATC-\n\nscore: -5\ncost: 28\n###########################################\n# Settings\n###########################################\nscoring_mat:\n    A  C  G  T  -\nA   2 -3 -3 -3 -2\nC  -3  2 -3 -3 -2\nG  -3 -3  2 -3 -2\nT  -3 -3 -3  2 -2\n-  -2 -2 -2 -2  2\n\ngap_open_score: -4\n\ncosting_mat:\n   A C G T -\nA  0 5 5 5 3\nC  5 0 5 5 3\nG  5 5 0 5 3\nT  5 5 5 0 3\n-  3 3 3 3 0\n\ngap_open_cost: 4"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Installation",
    "section": "",
    "text": "The package can be installed via pip, conda, or mamba.\n\n\nRun the following in a terminal.\npython3 -m venv my_venv_for_globalign\nsource my_venv_for_globalign/bin/activate\npip install globalign\n\n\n\nTry running\nglobaligner --version"
  },
  {
    "objectID": "reference/index.html#pip",
    "href": "reference/index.html#pip",
    "title": "Installation",
    "section": "",
    "text": "Run the following in a terminal.\npython3 -m venv my_venv_for_globalign\nsource my_venv_for_globalign/bin/activate\npip install globalign"
  },
  {
    "objectID": "reference/index.html#check-installation",
    "href": "reference/index.html#check-installation",
    "title": "Installation",
    "section": "",
    "text": "Try running\nglobaligner --version"
  },
  {
    "objectID": "reference/docs/index.html",
    "href": "reference/docs/index.html",
    "title": "Function reference",
    "section": "",
    "text": "start\n\n\n\nglobaligner\nPerform optimal global alignment of two nucleotide or amino acid sequences.\n\n\nconclude"
  },
  {
    "objectID": "reference/docs/index.html#documentation",
    "href": "reference/docs/index.html#documentation",
    "title": "Function reference",
    "section": "",
    "text": "start\n\n\n\nglobaligner\nPerform optimal global alignment of two nucleotide or amino acid sequences.\n\n\nconclude"
  },
  {
    "objectID": "reference/docs/start.html",
    "href": "reference/docs/start.html",
    "title": "start",
    "section": "",
    "text": "start\n\n\n\n\n\nName\nDescription\n\n\n\n\nSimpleScoringSettings\nKeep things simple to avoid conflicts\n\n\n\n\n\nstart.SimpleScoringSettings(\n    match_score=2,\n    mismatch_score=-3,\n    gap_open_score=-4,\n    gap_extension_score=-2,\n)\nKeep things simple to avoid conflicts\nsuch as when a custom scoring matrix is used.\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncheck_big_main_diag\nCheck if each row of a matrix has its maximum\n\n\ncheck_seq_lengths\nCheck that the product of the lengths of the sequences is\n\n\ncheck_symmetric\nCheck if a matrix is symmetric.\n\n\ncosting_mat_to_scoring_mat\nGet a scoring matrix from a costing matrix.\n\n\ndraw_random_seq\n\n\n\ndraw_two_random_seqs\n\n\n\nget_max_val\nGet the max value inside a nested dictionary.\n\n\nmake_3d_array\nSee: https://www.freecodecamp.org/news/list-within-a-list-in-python-initialize-a-nested-list/\n\n\nmake_matrix\nMake a matrix as a nested list.\n\n\nread_first_2_seqs_from_fasta\n\n\n\nread_scoring_mat\nRead in scoring matrix.\n\n\nread_seq_from_fasta\nRead in a FASTA file.\n\n\nscoring_mat_to_costing_mat\nGet a valid cost matrix from a scoring matrix.\n\n\nvalidate_and_transform_args\nValidates the command line arguments\n\n\nvalidate_scoring_mat_keys\nCheck that the scoring_mat_keys include\n\n\n\n\n\nstart.check_big_main_diag(mat)\nCheck if each row of a matrix has its maximum in the main diagonal entry.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmat\ndict[dict]\nnested dictionary representing a matrix\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nbool\nTrue if each row of mat has its maximum\n\n\n\nbool\nin the main diagonal entry; otherwise, False.\n\n\n\n\n\n\n\nstart.check_seq_lengths(seq_1, seq_2, max_seq_len_prod)\nCheck that the product of the lengths of the sequences is\nreasonable, i.e. positive and less than max_seq_len_prod.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nRuntimeError\nFor a variety of a reasons.\n\n\n\n\n\n\n\nstart.check_symmetric(mat)\nCheck if a matrix is symmetric.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmat\ndict[dict]\nnested dictionary representing a matrix\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nbool\nTrue if mat is symmetric and False otherwise.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAttributeError\nif mat is not a nested dictionary.\n\n\n\n\n\n\n\nstart.costing_mat_to_scoring_mat(\n    costing_mat,\n    max_score,\n    delta_d=None,\n    delta_i=None,\n)\nGet a scoring matrix from a costing matrix.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncosting_mat\ndict[dict]\nNested dict representation of a distance matrix\nrequired\n\n\nmax_score\nint | float\nMax in scoring_mat\nrequired\n\n\ndelta_d\nint | float\namount to increase the cost of a horizontal step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\ndelta_i\nint | float\namount to increase the cost of a vertical step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[dict]\nNested dict representation of a scoring matrix\n\n\n\nReference: https://curiouscoding.nl/posts/alignment-scores-transform/\n\n\n\n\nstart.draw_random_seq(alphabet, min_len, max_len, seed=None)\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIndexError\nIf alphabet == [].\n\n\n\nTypeError\nIf alphabet is not a list with a len() method.\n\n\n\nValueError\nIf min_len &gt; max_len or if min_len &lt; 0.\n\n\n\n\n\n\n\nstart.draw_two_random_seqs(\n    alphabet,\n    min_len_seq_1,\n    max_len_seq_1,\n    min_len_seq_2,\n    max_len_seq_2,\n    divergence,\n    seed_1=None,\n    seed_2=None,\n)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndivergence\nfloat\na number between 0 and 1, inclusive. Higher values for divergence will tend to make the two sequences more different from each other.\nrequired\n\n\n\n\n\n\n\nstart.get_max_val(m)\nGet the max value inside a nested dictionary.\n\n\n\nstart.make_3d_array(dim_1, dim_2, dim_3, fill_val)\nSee: https://www.freecodecamp.org/news/list-within-a-list-in-python-initialize-a-nested-list/\n\n\n\nstart.make_matrix(num_rows, num_cols, fill_val)\nMake a matrix as a nested list.\nSee: https://www.freecodecamp.org/news/list-within-a-list-in-python-initialize-a-nested-list/\n\n\n\nstart.read_first_2_seqs_from_fasta(fasta_path)\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[str]\n(seq_1, seq_2)\n\n\n\nRaises: RuntimeError\n\n\n\n\nstart.read_scoring_mat(scoring_mat_path)\nRead in scoring matrix.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nif not scoring_mat_path.is_file().\n\n\n\nRunTimeError\nif the header row did not have single letters spaced apart.\n\n\n\nRunTimeError\nif row headers do not match column headers.\n\n\n\n\n\n\n\nstart.read_seq_from_fasta(fasta_path)\nRead in a FASTA file.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nRuntimeError\nIf invalid FASTA format is detected.\n\n\n\nYields: 2-tuples where the 0th element is the description and the 1st element is the sequence\nSee: NCBI FASTA specification https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=BlastHelp\n\n\n\n\nstart.scoring_mat_to_costing_mat(\n    scoring_mat,\n    max_score,\n    delta_d=None,\n    delta_i=None,\n)\nGet a valid cost matrix from a scoring matrix.\nThe cost matrix will be a valid distance matrix.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nscoring_mat\ndict[dict]\nNested dict representation of a similarity matrix\nrequired\n\n\nmax_score\nint | float\nMax in scoring_mat\nrequired\n\n\ndelta_d\nint | float\namount to increase the cost of a horizontal step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\ndelta_i\nint | float\namount to increase the cost of a vertical step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[dict]\nNested dict representation of a distance matrix whose entries correspond to string edit costs for matches and mismatches.\n\n\n\nReference: https://curiouscoding.nl/posts/alignment-scores-transform/\n\n\n\n\nstart.validate_and_transform_args(\n    input_fasta=None,\n    output=None,\n    seq_1=None,\n    seq_2=None,\n    scoring_mat_name=None,\n    scoring_mat_path=None,\n    match_score=None,\n    mismatch_score=None,\n    mismatch_cost=None,\n    gap_open_score=None,\n    gap_open_cost=None,\n    gap_extension_score=None,\n    gap_extension_cost=None,\n)\nValidates the command line arguments\nor the arguments that are passed when the module is imported and its functionality used that way.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\ntuple with entries of seq_1_validated, seq_2_validated, scoring_mat_validated, costing_mat_validated, gap_open_score_validated, gap_open_cost_validated, output_validated\n\n\n\n\n\n\n\nstart.validate_scoring_mat_keys(scoring_mat_keys, common_alphabet)\nCheck that the scoring_mat_keys include\na gap ‘-’ and any other necessary letters (i.e. letters in common_alphabet)."
  },
  {
    "objectID": "reference/docs/start.html#classes",
    "href": "reference/docs/start.html#classes",
    "title": "start",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nSimpleScoringSettings\nKeep things simple to avoid conflicts\n\n\n\n\n\nstart.SimpleScoringSettings(\n    match_score=2,\n    mismatch_score=-3,\n    gap_open_score=-4,\n    gap_extension_score=-2,\n)\nKeep things simple to avoid conflicts\nsuch as when a custom scoring matrix is used."
  },
  {
    "objectID": "reference/docs/start.html#functions",
    "href": "reference/docs/start.html#functions",
    "title": "start",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncheck_big_main_diag\nCheck if each row of a matrix has its maximum\n\n\ncheck_seq_lengths\nCheck that the product of the lengths of the sequences is\n\n\ncheck_symmetric\nCheck if a matrix is symmetric.\n\n\ncosting_mat_to_scoring_mat\nGet a scoring matrix from a costing matrix.\n\n\ndraw_random_seq\n\n\n\ndraw_two_random_seqs\n\n\n\nget_max_val\nGet the max value inside a nested dictionary.\n\n\nmake_3d_array\nSee: https://www.freecodecamp.org/news/list-within-a-list-in-python-initialize-a-nested-list/\n\n\nmake_matrix\nMake a matrix as a nested list.\n\n\nread_first_2_seqs_from_fasta\n\n\n\nread_scoring_mat\nRead in scoring matrix.\n\n\nread_seq_from_fasta\nRead in a FASTA file.\n\n\nscoring_mat_to_costing_mat\nGet a valid cost matrix from a scoring matrix.\n\n\nvalidate_and_transform_args\nValidates the command line arguments\n\n\nvalidate_scoring_mat_keys\nCheck that the scoring_mat_keys include\n\n\n\n\n\nstart.check_big_main_diag(mat)\nCheck if each row of a matrix has its maximum in the main diagonal entry.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmat\ndict[dict]\nnested dictionary representing a matrix\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nbool\nTrue if each row of mat has its maximum\n\n\n\nbool\nin the main diagonal entry; otherwise, False.\n\n\n\n\n\n\n\nstart.check_seq_lengths(seq_1, seq_2, max_seq_len_prod)\nCheck that the product of the lengths of the sequences is\nreasonable, i.e. positive and less than max_seq_len_prod.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nRuntimeError\nFor a variety of a reasons.\n\n\n\n\n\n\n\nstart.check_symmetric(mat)\nCheck if a matrix is symmetric.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmat\ndict[dict]\nnested dictionary representing a matrix\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nbool\nTrue if mat is symmetric and False otherwise.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAttributeError\nif mat is not a nested dictionary.\n\n\n\n\n\n\n\nstart.costing_mat_to_scoring_mat(\n    costing_mat,\n    max_score,\n    delta_d=None,\n    delta_i=None,\n)\nGet a scoring matrix from a costing matrix.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncosting_mat\ndict[dict]\nNested dict representation of a distance matrix\nrequired\n\n\nmax_score\nint | float\nMax in scoring_mat\nrequired\n\n\ndelta_d\nint | float\namount to increase the cost of a horizontal step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\ndelta_i\nint | float\namount to increase the cost of a vertical step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[dict]\nNested dict representation of a scoring matrix\n\n\n\nReference: https://curiouscoding.nl/posts/alignment-scores-transform/\n\n\n\n\nstart.draw_random_seq(alphabet, min_len, max_len, seed=None)\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIndexError\nIf alphabet == [].\n\n\n\nTypeError\nIf alphabet is not a list with a len() method.\n\n\n\nValueError\nIf min_len &gt; max_len or if min_len &lt; 0.\n\n\n\n\n\n\n\nstart.draw_two_random_seqs(\n    alphabet,\n    min_len_seq_1,\n    max_len_seq_1,\n    min_len_seq_2,\n    max_len_seq_2,\n    divergence,\n    seed_1=None,\n    seed_2=None,\n)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndivergence\nfloat\na number between 0 and 1, inclusive. Higher values for divergence will tend to make the two sequences more different from each other.\nrequired\n\n\n\n\n\n\n\nstart.get_max_val(m)\nGet the max value inside a nested dictionary.\n\n\n\nstart.make_3d_array(dim_1, dim_2, dim_3, fill_val)\nSee: https://www.freecodecamp.org/news/list-within-a-list-in-python-initialize-a-nested-list/\n\n\n\nstart.make_matrix(num_rows, num_cols, fill_val)\nMake a matrix as a nested list.\nSee: https://www.freecodecamp.org/news/list-within-a-list-in-python-initialize-a-nested-list/\n\n\n\nstart.read_first_2_seqs_from_fasta(fasta_path)\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple[str]\n(seq_1, seq_2)\n\n\n\nRaises: RuntimeError\n\n\n\n\nstart.read_scoring_mat(scoring_mat_path)\nRead in scoring matrix.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nif not scoring_mat_path.is_file().\n\n\n\nRunTimeError\nif the header row did not have single letters spaced apart.\n\n\n\nRunTimeError\nif row headers do not match column headers.\n\n\n\n\n\n\n\nstart.read_seq_from_fasta(fasta_path)\nRead in a FASTA file.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nRuntimeError\nIf invalid FASTA format is detected.\n\n\n\nYields: 2-tuples where the 0th element is the description and the 1st element is the sequence\nSee: NCBI FASTA specification https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=BlastHelp\n\n\n\n\nstart.scoring_mat_to_costing_mat(\n    scoring_mat,\n    max_score,\n    delta_d=None,\n    delta_i=None,\n)\nGet a valid cost matrix from a scoring matrix.\nThe cost matrix will be a valid distance matrix.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nscoring_mat\ndict[dict]\nNested dict representation of a similarity matrix\nrequired\n\n\nmax_score\nint | float\nMax in scoring_mat\nrequired\n\n\ndelta_d\nint | float\namount to increase the cost of a horizontal step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\ndelta_i\nint | float\namount to increase the cost of a vertical step in the dynamic programming matrix. delta_d + delta_i &gt;= max_score. Default: None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[dict]\nNested dict representation of a distance matrix whose entries correspond to string edit costs for matches and mismatches.\n\n\n\nReference: https://curiouscoding.nl/posts/alignment-scores-transform/\n\n\n\n\nstart.validate_and_transform_args(\n    input_fasta=None,\n    output=None,\n    seq_1=None,\n    seq_2=None,\n    scoring_mat_name=None,\n    scoring_mat_path=None,\n    match_score=None,\n    mismatch_score=None,\n    mismatch_cost=None,\n    gap_open_score=None,\n    gap_open_cost=None,\n    gap_extension_score=None,\n    gap_extension_cost=None,\n)\nValidates the command line arguments\nor the arguments that are passed when the module is imported and its functionality used that way.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\ntuple with entries of seq_1_validated, seq_2_validated, scoring_mat_validated, costing_mat_validated, gap_open_score_validated, gap_open_cost_validated, output_validated\n\n\n\n\n\n\n\nstart.validate_scoring_mat_keys(scoring_mat_keys, common_alphabet)\nCheck that the scoring_mat_keys include\na gap ‘-’ and any other necessary letters (i.e. letters in common_alphabet)."
  }
]